-- Create v_mark_weight_temp view
CREATE VIEW v_mark_weight_temp AS
SELECT 
    m.St_id,
    m.C_code,
    c.C_name,
    
    -- w_best2quizes (10% of Final_Marks)
    ((m.Quiz_01 + m.Quiz_02 + m.Quiz_03 - LEAST(m.Quiz_01, m.Quiz_02, m.Quiz_03)) / 2) * 0.1 AS w_best2quizes,
    
    -- Calculate w_Assignment (10% of Final_Marks)
    m.Assignment * 0.1 AS w_Assignment,
    
    -- Calculate w_mid (20% of Final_Marks)
    CASE 
        WHEN m.Mid_T IS NOT NULL AND m.Mid_P IS NOT NULL THEN (m.Mid_T * 0.1 + m.Mid_P * 0.1)  
        WHEN m.Mid_T IS NOT NULL AND m.Mid_P IS NULL THEN m.Mid_T * 0.2                        
        WHEN m.Mid_T IS NULL AND m.Mid_P IS NOT NULL THEN m.Mid_P * 0.2                        
        ELSE 0
    END AS w_mid,
    
    -- Calculate w_final (60% of Final_Marks)
    CASE 
        WHEN m.Final_T IS NOT NULL AND m.Final_P IS NOT NULL THEN (m.Final_T * 0.3 + m.Final_P * 0.3)  
        WHEN m.Final_T IS NOT NULL AND m.Final_P IS NULL THEN m.Final_T * 0.6                          
        WHEN m.Final_T IS NULL AND m.Final_P IS NOT NULL THEN m.Final_P * 0.6                          
        ELSE 0
    END AS w_final,
    
    -- Calculate w_CA_marks (40% of Final_Marks: quizzes + assignment + mid)
    (((m.Quiz_01 + m.Quiz_02 + m.Quiz_03 - LEAST(m.Quiz_01, m.Quiz_02, m.Quiz_03)) / 2) * 0.1) + 
    (m.Assignment * 0.1) +
    (CASE 
        WHEN m.Mid_T IS NOT NULL AND m.Mid_P IS NOT NULL THEN (m.Mid_T * 0.1 + m.Mid_P * 0.1)
        WHEN m.Mid_T IS NOT NULL AND m.Mid_P IS NULL THEN m.Mid_T * 0.2
        WHEN m.Mid_T IS NULL AND m.Mid_P IS NOT NULL THEN m.Mid_P * 0.2
        ELSE 0
    END) AS w_CA_marks,
    
    -- Calculate Final_Marks (w_CA_marks + w_final)
    (((m.Quiz_01 + m.Quiz_02 + m.Quiz_03 - LEAST(m.Quiz_01, m.Quiz_02, m.Quiz_03)) / 2) * 0.1) + 
    (m.Assignment * 0.1) +
    (CASE 
        WHEN m.Mid_T IS NOT NULL AND m.Mid_P IS NOT NULL THEN (m.Mid_T * 0.1 + m.Mid_P * 0.1)
        WHEN m.Mid_T IS NOT NULL AND m.Mid_P IS NULL THEN m.Mid_T * 0.2
        WHEN m.Mid_T IS NULL AND m.Mid_P IS NOT NULL THEN m.Mid_P * 0.2
        ELSE 0
    END) +
    (CASE 
        WHEN m.Final_T IS NOT NULL AND m.Final_P IS NOT NULL THEN (m.Final_T * 0.3 + m.Final_P * 0.3)
        WHEN m.Final_T IS NOT NULL AND m.Final_P IS NULL THEN m.Final_T * 0.6
        WHEN m.Final_T IS NULL AND m.Final_P IS NOT NULL THEN m.Final_P * 0.6
        ELSE 0
    END) AS Final_Marks
    
FROM MARK m
JOIN COURSE c ON m.C_code = c.C_code;





-- Create grade view
CREATE VIEW grade AS
SELECT 
    St_id,
    c_code,
    c_name AS Course_name,
    ROUND(w_best2quizes, 2) AS w_best2quizes,
    ROUND(w_Assignment, 2) AS w_Assignment,
    ROUND(w_mid, 2) AS w_mid,
    ROUND(w_final, 2) AS w_final,
    ROUND(w_CA_marks, 2) AS w_CA_marks,
    ROUND(Final_Marks, 2) AS Final_Marks,
    
    -- Calculate Grade with failure reasons
    CASE 
        WHEN w_CA_marks < 20 AND w_final < 21 THEN 'E (CA & ESA)'
        WHEN w_CA_marks < 20 THEN 'E (CA)'
        WHEN w_final < 21 THEN 'E (ESA)'
        WHEN Final_Marks >= 85 THEN 'A+'
        WHEN Final_Marks >= 75 THEN 'A'
        WHEN Final_Marks >= 70 THEN 'A-'
        WHEN Final_Marks >= 65 THEN 'B+'
        WHEN Final_Marks >= 60 THEN 'B'
        WHEN Final_Marks >= 55 THEN 'B-'
        WHEN Final_Marks >= 50 THEN 'C+'
        WHEN Final_Marks >= 45 THEN 'C'
        WHEN Final_Marks >= 40 THEN 'C-'
        WHEN Final_Marks >= 35 THEN 'D'
        ELSE 'E'
    END AS Grade
    
FROM v_mark_weight_temp;

select * from grade;




-- final marks & grade
DELIMITER //
CREATE DEFINER='root'@'localhost' PROCEDURE Final_Marks_Only(
    IN studentID CHAR(6),
    IN courseCode CHAR(6)
)
BEGIN
    SELECT
        g.St_id,
        g.c_code AS C_code,
        g.Course_name AS C_name,
        g.Final_Marks,
        g.Grade
    FROM grade g
    WHERE (studentID IS NULL OR g.St_id = studentID)
      AND (courseCode IS NULL OR g.c_code = courseCode)
    ORDER BY g.St_id, g.c_code;
END //
DELIMITER ;


-- admin perspective view
DROP PROCEDURE IF EXISTS Student_Course_Details;

DELIMITER //

CREATE PROCEDURE Student_Course_Details(
    IN studentID CHAR(6),
    IN courseCode CHAR(6)
)
BEGIN
    SELECT 
        m.St_id,
        m.C_code,
        c.C_name AS Course_Name,
        
        ROUND(m.Quiz_01, 2) AS Quiz_01,
        ROUND(m.Quiz_02, 2) AS Quiz_02,
        ROUND(m.Quiz_03, 2) AS Quiz_03,
        ROUND(m.Assignment, 2) AS Assignment,
        ROUND(
            CASE 
                WHEN m.Mid_T IS NOT NULL AND m.Mid_P IS NOT NULL THEN (m.Mid_T + m.Mid_P) / 2
                WHEN m.Mid_T IS NOT NULL THEN m.Mid_T
                WHEN m.Mid_P IS NOT NULL THEN m.Mid_P
                ELSE NULL
            END, 2
        ) AS Mid_Marks,
        ROUND(
            CASE 
                WHEN m.Final_T IS NOT NULL AND m.Final_P IS NOT NULL THEN (m.Final_T + m.Final_P) / 2
                WHEN m.Final_T IS NOT NULL THEN m.Final_T
                WHEN m.Final_P IS NOT NULL THEN m.Final_P
                ELSE NULL
            END, 2
        ) AS ESA_Raw,  -- Raw ESA marks out of 100
        
        -- Weighted CA Marks (40%) and ESA Marks (60%)
        g.w_CA_marks AS CA_Marks_Weighted,
        g.w_final AS ESA_Marks_Weighted,
        
        -- Final Results
        g.Final_Marks AS Total_Final_Marks,
        g.Grade
        
    FROM MARK m
    JOIN COURSE c ON m.C_code = c.C_code
    JOIN grade g ON m.St_id = g.St_id AND m.C_code = g.c_code
    WHERE (studentID IS NULL OR m.St_id = studentID)
      AND (courseCode IS NULL OR m.C_code = courseCode)
    ORDER BY m.St_id, m.C_code;
END //

DELIMITER ;
